{
	"name": "esaenz7azdf101",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "esaenz7azdl101",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "esaenz7azdl101",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "esaenz7azdl101",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "esaenz7azds201",
						"type": "DatasetReference"
					},
					"name": "sink101"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     column101 as string,",
				"     column102 as string,",
				"     column201 as string,",
				"     column202 as string",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source2, source1 join(toString(byName($column101)) == toString(byName($column102)),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source3 join(toString(byName($column201)) == toString(byName($column202)),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as string,",
				"          Airport as string,",
				"          City as string,",
				"          Country as string,",
				"          Code1 as string,",
				"          Code2 as string,",
				"          LocationLat as string,",
				"          LocationLng as string,",
				"          c1 as string,",
				"          c2 as string,",
				"          c3 as string,",
				"          c4 as string,",
				"          c5 as string,",
				"          c6 as string,",
				"          FL_DATE as string,",
				"          OP_CARRIER as string,",
				"          OP_CARRIER_FL_NUM as string,",
				"          ORIGIN as string,",
				"          DEST as string,",
				"          CRS_DEP_TIME as string,",
				"          DEP_TIME as string,",
				"          DEP_DELAY as string,",
				"          TAXI_OUT as string,",
				"          WHEELS_OFF as string,",
				"          WHEELS_ON as string,",
				"          TAXI_IN as string,",
				"          CRS_ARR_TIME as string,",
				"          ARR_TIME as string,",
				"          ARR_DELAY as string,",
				"          CANCELLED as string,",
				"          CANCELLATION_CODE as string,",
				"          DIVERTED as string,",
				"          CRS_ELAPSED_TIME as string,",
				"          ACTUAL_ELAPSED_TIME as string,",
				"          AIR_TIME as string,",
				"          DISTANCE as string,",
				"          CARRIER_DELAY as string,",
				"          WEATHER_DELAY as string,",
				"          NAS_DELAY as string,",
				"          SECURITY_DELAY as string,",
				"          LATE_AIRCRAFT_DELAY as string,",
				"          {Unnamed: 27} as string,",
				"          EventId as string,",
				"          Type as string,",
				"          Severity as string,",
				"          {StartTime(UTC)} as string,",
				"          {EndTime(UTC)} as string,",
				"          TimeZone as string,",
				"          AirportCode as string,",
				"          County as string,",
				"          State as string,",
				"          ZipCode as string",
				"     ),",
				"     partitionFileNames:['data1.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink101"
			]
		}
	}
}